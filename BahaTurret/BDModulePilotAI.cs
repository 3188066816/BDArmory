//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace BahaTurret
{
	public class BDModulePilotAI : PartModule
	{
		public enum SteerModes{NormalFlight, Aiming}
		SteerModes steerMode = SteerModes.NormalFlight;

		public enum PilotCommands{Free, Attack, Follow, FlyTo}


		[KSPField(isPersistant = true)]
		public bool pilotEnabled = false;

		bool startedLanded = false;
		bool extending = false;

		bool requestedExtend = false;
		Vector3 requestedExtendTpos;

		public void RequestExtend(Vector3 tPosition)
		{
			requestedExtend = true;
			requestedExtendTpos = tPosition;
		}

		GameObject vobj;
		Transform velocityTransform
		{
			get
			{
				if(!vobj)
				{
					vobj = new GameObject("velObject");
					vobj.transform.position = vessel.ReferenceTransform.position;
					vobj.transform.parent = vessel.ReferenceTransform;
				}

				return vobj.transform;
			}
		}

		Vessel targetVessel;

		Transform vesselTransform;

		Vector3 upDirection = Vector3.up;

		public MissileFire weaponManager;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Default Alt."),
		 UI_FloatRange(minValue = 500f, maxValue = 8500f, stepIncrement = 25f, scene = UI_Scene.All)]
		public float defaultAltitude = 1500;
		
		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Min Altitude"),
		 UI_FloatRange(minValue = 150f, maxValue = 1500, stepIncrement = 10f, scene = UI_Scene.All)]
		public float minAltitude = 800;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Steer Factor"),
		 UI_FloatRange(minValue = 0.1f, maxValue = 20f, stepIncrement = .1f, scene = UI_Scene.All)]
		public float steerMult = 14;
		//make a combat steer mult and idle steer mult
		
		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Steer Limiter"),
		 UI_FloatRange(minValue = .1f, maxValue = 1f, stepIncrement = .05f, scene = UI_Scene.All)]
		public float maxSteer = 1;
		
		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Steer Damping"),
		 UI_FloatRange(minValue = 1f, maxValue = 8f, stepIncrement = 0.5f, scene = UI_Scene.All)]
		public float steerDamping = 5;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Max Speed"),
		 UI_FloatRange(minValue = 125f, maxValue = 800f, stepIncrement = 1.0f, scene = UI_Scene.All)]
		public float maxSpeed = 325;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "TakeOff Speed"),
			UI_FloatRange(minValue = 20f, maxValue = 200f, stepIncrement = 1.0f, scene = UI_Scene.All)]
		public float takeOffSpeed = 70;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "MinCombatSpeed"),
			UI_FloatRange(minValue = 20f, maxValue = 120, stepIncrement = 1.0f, scene = UI_Scene.All)]
		public float minSpeed = 60f;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Idle Speed"),
			UI_FloatRange(minValue = 20f, maxValue = 200f, stepIncrement = 1.0f, scene = UI_Scene.All)]
		public float idleSpeed = 120f;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Standby Mode"),
		 UI_Toggle(enabledText = "On", disabledText = "Off")]
		public bool standbyMode = false;




		float threatLevel = 1;
		float turningTimer = 0;
		float evasiveTimer = 0;
		Vector3 lastTargetPosition;

		string debugString = string.Empty;

		LineRenderer lr;
		Vector3 flyingToPosition;

		Vector3d defaultOrbitCoords;

		//speed controller
		BDAirspeedControl speedController;
		bool useAB = true;
		bool useBrakes = true;

		//collision detection
		int collisionDetectionTicker = 0;
		float collisionDetectionTimer = 0;
		Vector3 collisionAvoidDirection;

		//wing command
		int commandFollowIndex = 0;
		PilotCommands command;
		public PilotCommands currentCommand
		{
			get
			{
				return command;
			}
		}
		ModuleWingCommander commandLeader;
		bool useRollHint = false;
		Vector3d commandGeoPos;
		public Vector3d commandPosition
		{
			get
			{
				return VectorUtils.GetWorldSurfacePostion(commandGeoPos, vessel.mainBody);
			}
			set
			{
				commandGeoPos = VectorUtils.WorldPositionToGeoCoords(value, vessel.mainBody);
			}
		}
		public Vector3d commandGPS
		{
			get
			{
				return commandGeoPos;
			}
		}
		double commandSpeed;
		Vector3d commandHeading;
		public string currentStatus = "Free";


		void Start()
		{
			if(HighLogic.LoadedSceneIsFlight)
			{
				part.OnJustAboutToBeDestroyed += DeactivatePilot;
				vessel.OnJustAboutToBeDestroyed += DeactivatePilot;
				MissileFire.OnToggleTeam += OnToggleTeam;
				vesselTransform = vessel.ReferenceTransform;
				if(pilotEnabled)
				{
					ActivatePilot();
				}
			}

			RefreshPartWindow();
		}

		void OnDestroy()
		{
			MissileFire.OnToggleTeam -= OnToggleTeam;
		}

		void OnToggleTeam(MissileFire mf, BDArmorySettings.BDATeams team)
		{
			if(mf.vessel == vessel || (commandLeader && commandLeader.vessel == mf.vessel))
			{
				ReleaseCommand();
			}
		}

		[KSPAction("Activate Pilot")]
		public void AGActivatePilot(KSPActionParam param)
		{
			ActivatePilot();
		}

		[KSPAction("Deactivate Pilot")]
		public void AGDeactivatePilot(KSPActionParam param)
		{
			DeactivatePilot();
		}

		[KSPAction("Toggle Pilot")]
		public void AGTogglePilot(KSPActionParam param)
		{
			TogglePilot();
		}


		public void ActivatePilot()
		{
			pilotEnabled = true;
			vessel.OnFlyByWire -= AutoPilot;
			vessel.OnFlyByWire += AutoPilot;
			startedLanded = vessel.LandedOrSplashed;

			if(!speedController)
			{
				speedController = gameObject.AddComponent<BDAirspeedControl>();
				speedController.vessel = vessel;
			}

			speedController.Activate();

			GameEvents.onVesselDestroy.Remove(RemoveAutopilot);
			GameEvents.onVesselDestroy.Add(RemoveAutopilot);

			defaultOrbitCoords = VectorUtils.WorldPositionToGeoCoords(vessel.ReferenceTransform.position, vessel.mainBody);

			RefreshPartWindow();
		}

		public void DeactivatePilot()
		{
			pilotEnabled = false;
			vessel.OnFlyByWire -= AutoPilot;
			RefreshPartWindow();

			if(speedController)
			{
				speedController.Deactivate();
			}
		}

		void RemoveAutopilot(Vessel v)
		{
			if(v == vessel)
			{
				v.OnFlyByWire -= AutoPilot;
			}
		}



		[KSPEvent(guiActive = true, guiName = "Toggle Pilot", active = true)]
		public void TogglePilot()
		{
			if(pilotEnabled)
			{
				DeactivatePilot();
			}
			else
			{
				ActivatePilot();
			}
		}

		void RefreshPartWindow()
		{
			Events["TogglePilot"].guiName = pilotEnabled ? "Deactivate Pilot" : "Activate Pilot";

			//Misc.RefreshAssociatedWindows(part);
		}

		void Update()
		{
			if(BDArmorySettings.DRAW_DEBUG_LINES && pilotEnabled)
			{
				if(lr)
				{
					lr.enabled = true;
					lr.SetPosition(0, vessel.ReferenceTransform.position);
					lr.SetPosition(1, flyingToPosition);
				}
				else
				{
					lr = gameObject.AddComponent<LineRenderer>();
					lr.SetVertexCount(2);
					lr.SetWidth(0.5f, 0.5f);
				}


				minSpeed = Mathf.Clamp(minSpeed, 0, idleSpeed - 20);
				minSpeed = Mathf.Clamp(minSpeed, 0, maxSpeed - 20);
			}
			else
			{
				if(lr)
				{
					lr.enabled = false;
				}
			}
		}


		void AutoPilot(FlightCtrlState s)
		{
			if(!vessel || !vessel.transform || vessel.packed || !vessel.mainBody)
			{
				return;
			}
			vesselTransform = vessel.ReferenceTransform;

			//default brakes off full throttle
			//s.mainThrottle = 1;

			//vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, false);
			AdjustThrottle(maxSpeed, true);
			useAB = true;
			useBrakes = true;
			vessel.ActionGroups.SetGroup(KSPActionGroup.SAS, true);

			steerMode = SteerModes.NormalFlight;


			GetGuardTarget();
			if(vessel.LandedOrSplashed && standbyMode && weaponManager && (BDATargetManager.TargetDatabase[BDATargetManager.BoolToTeam(weaponManager.team)].Count == 0||BDArmorySettings.PEACE_MODE))
			{
				//s.mainThrottle = 0;
				//vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);
				AdjustThrottle(0, true);
				return;
			}
			//upDirection = -FlightGlobals.getGeeForceAtPosition(transform.position).normalized;
			upDirection = VectorUtils.GetUpDirection(vessel.transform.position);
			debugString = string.Empty;
			if(MissileGuidance.GetRadarAltitude(vessel) < minAltitude)
			{
				startedLanded = true;
			}



			if(startedLanded)
			{
				if(command != PilotCommands.Follow)
				{
					currentStatus = "Gain Alt.";
				}
				TakeOff(s);
				turningTimer = 0;
			}
			else
			{
				if(FlyAvoidCollision(s))
				{
					turningTimer = 0;
				}
				else if(command != PilotCommands.Free)
				{
					UpdateCommand(s);
				}
				else
				{
					UpdateAI(s);
				}
			}

			//brake and cut throttle if exceeding max speed
			/*
			if(vessel.srfSpeed > maxSpeed)
			{
				vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);
				s.mainThrottle = 0;
			}
			*/

			debugString += "\nthreatLevel: " + threatLevel;
		}

		void UpdateAI(FlightCtrlState s)
		{
			currentStatus = "Free";
			if(weaponManager && weaponManager.guardMode && !targetVessel)
			{
				TargetInfo potentialTarget = BDATargetManager.GetLeastEngagedTarget(weaponManager);
				if(potentialTarget && potentialTarget.Vessel)
				{
					targetVessel = potentialTarget.Vessel;
				}
			}

			if(evasiveTimer > 0 || (weaponManager && (weaponManager.missileIsIncoming || weaponManager.isChaffing || weaponManager.isFlaring || weaponManager.underFire)))
			{
				Evasive(s);
				evasiveTimer += Time.fixedDeltaTime;
				turningTimer = 0;

				if(evasiveTimer > 5) evasiveTimer = 0;
			}
			else if(!extending && weaponManager && targetVessel != null && targetVessel.transform != null)
			{
				if(!targetVessel.LandedOrSplashed)
				{
					if(vessel.altitude < defaultAltitude && Vector3.Angle(targetVessel.transform.position - vessel.transform.position, -upDirection) < 35)
					{
						//dangerous if low altitude and target is far below you - don't dive into ground!
						extending = true;
						lastTargetPosition = targetVessel.transform.position;
					}

					if(Vector3.Angle(targetVessel.transform.position - vesselTransform.position, vesselTransform.up) > 35)
					{
						turningTimer += Time.deltaTime;
					}
					else
					{
						turningTimer = 0;
					}

					debugString += "turningTimer: " + turningTimer;

					if(turningTimer > 15)
					{
						//extend if turning circles for too long
						extending = true;
						turningTimer = 0;
						lastTargetPosition = targetVessel.transform.position;
					}
				}
				else //extend if too close for agm attack
				{
					float extendDistance = Mathf.Clamp(weaponManager.guardRange - 1800, 2500, 4000);
					float srfDist = Vector3.Distance(GetSurfacePosition(targetVessel.transform.position), GetSurfacePosition(vessel.transform.position));

					if(srfDist < extendDistance && Vector3.Angle(vesselTransform.up, targetVessel.transform.position - vessel.transform.position) > 45)
					{
						extending = true;
						lastTargetPosition = targetVessel.transform.position;
					}
				}
					

				if(!extending)
				{
					if(requestedExtend)
					{
						requestedExtend = false;
						extending = true;
						lastTargetPosition = requestedExtendTpos;
					}
					else
					{
						currentStatus = "Engaging";
						debugString += "\nFlying to target";
						threatLevel = 1;
						FlyToTargetVessel(s, targetVessel);
					}
				}
			}
			else
			{
				if(!extending)
				{
					currentStatus = "Orbiting";
					FlyOrbit(s, defaultOrbitCoords, 2000, idleSpeed, true);
				}
			}

			if(extending)
			{
				currentStatus = "Extending";
				threatLevel = 1;
				debugString += "\nExtending";
				FlyExtend(s, lastTargetPosition);
			}
		}


		bool FlyAvoidCollision(FlightCtrlState s)
		{
			if(collisionDetectionTimer > 2)
			{
				collisionDetectionTimer = 0;
				collisionDetectionTicker = 20;
			}
			if(collisionDetectionTimer > 0)
			{
				//fly avoid
				currentStatus = "AvoidCollision";
				debugString += "\nAvoiding Collision";
				collisionDetectionTimer += Time.fixedDeltaTime;


				Vector3 target = vesselTransform.position + collisionAvoidDirection;
				FlyToPosition(s, target);
				return true;
			}
			else if(collisionDetectionTicker > 20)
			{
				collisionDetectionTicker = 0;
				Vector3 badDirection;
				if(DetectCollision(flyingToPosition - vesselTransform.position, out badDirection))
				{
					collisionDetectionTimer += Time.fixedDeltaTime;
					 //= flyingToPosition - vesselTransform.position;
					Vector3 axis = -Vector3.Cross(vesselTransform.up, badDirection);
					//axis = Vector3.Project(axis, upDirection);
					collisionAvoidDirection = Quaternion.AngleAxis(90, axis) * badDirection; //need to change axis to opposite of direction to collision
				}
			}
			else
			{
				collisionDetectionTicker++;
			}

			return false;
		}

		void FlyToTargetVessel(FlightCtrlState s, Vessel v)
		{
			Vector3 target = v.CoM;
			MissileLauncher missile = null;
			Vector3 vectorToTarget = v.transform.position - vesselTransform.position;
			float distanceToTarget = vectorToTarget.magnitude;
			if(weaponManager)
			{
				missile = weaponManager.currentMissile;
				if(missile != null)
				{
					if(missile.GetWeaponClass() == WeaponClasses.Missile)
					{
						if(missile.targetingMode == MissileLauncher.TargetingModes.Heat && !weaponManager.heatTarget.exists)
						{
							target += v.srf_velocity.normalized * 10;
						}
						else
						{
							target = MissileGuidance.GetAirToAirFireSolution(missile, v);
						}

						if(Vector3.Angle(target - vesselTransform.position, vesselTransform.forward) < 20f)
						{
							steerMode = SteerModes.Aiming;
						}
					}
					else //bombing
					{
						if(Vector3.Angle(target - vesselTransform.position, vesselTransform.up) < 45f)
						{
							/*
							target = GetSurfacePosition(target) + (vessel.upAxis * vessel.altitude);
							Vector3 fixedTDir = Quaternion.FromToRotation(Vector3.ProjectOnPlane(vessel.srf_velocity, vessel.upAxis), target - vesselTransform.position) * (target - vesselTransform.position);
							target = FlightPosition(vesselTransform.position + fixedTDir, Mathf.Max(defaultAltitude - 500f, minAltitude));
							*/

							target = target+(Mathf.Max(defaultAltitude - 500f, minAltitude)*upDirection);
							Vector3 tDir = (target-vesselTransform.position).normalized;
							tDir = (1000 * tDir) - (vessel.srf_velocity.normalized * 600);
							target = vesselTransform.position + tDir;

						}
						else
						{
							target = target+(Mathf.Max(defaultAltitude - 500f, minAltitude)*upDirection);
						}
					}
            	}
				else
				{
					ModuleWeapon weapon = weaponManager.currentGun;
					if(weapon!=null)
					{
						//target -= 1.30f*weapon.GetLeadOffset();
						Vector3 leadOffset = weapon.GetLeadOffset();

						float targetAngVel = 1.65f * Vector3.Angle(v.transform.position - vessel.transform.position, v.transform.position + (vessel.srf_velocity) - vessel.transform.position);
						debugString += "\ntargetAngVel: " + targetAngVel;
						float magnifier = Mathf.Clamp(targetAngVel, 1.25f, 3);
						magnifier += (0.5f * Mathf.Sin(Time.time / 2));
						target -= magnifier * leadOffset;
						float angleToLead = Vector3.Angle(vesselTransform.up, target - vesselTransform.position);
						if(distanceToTarget < weaponManager.gunRange &&  angleToLead < 20)
						{
							steerMode = SteerModes.Aiming; //steer to aim
						}

						if(v.LandedOrSplashed)
						{
							if(distanceToTarget > defaultAltitude * 2.2f)
							{
								target = FlightPosition(target, defaultAltitude);
							}
							else
							{
								steerMode = SteerModes.Aiming;
							}
						}
						else if(distanceToTarget > weaponManager.gunRange * 1.5f || Vector3.Dot(target-vesselTransform.position, vesselTransform.up) < 0)
						{
							target = v.CoM;
						}
					}
				}
			}





			float targetDot = Vector3.Dot(vesselTransform.up, v.transform.position-vessel.transform.position);

			//manage speed when close to enemy
			float finalMaxSpeed = maxSpeed;
			if(targetDot > 0)
			{
				finalMaxSpeed = Mathf.Max((distanceToTarget - 100) / 8, 0) + (float)v.srfSpeed;
				finalMaxSpeed = Mathf.Max(finalMaxSpeed, minSpeed);
			}
			AdjustThrottle(finalMaxSpeed, true);
		
			if((targetDot < 0 && vessel.srfSpeed > finalMaxSpeed)
				&& distanceToTarget < 300 && vessel.srfSpeed < v.srfSpeed * 1.25f && Vector3.Dot(vessel.srf_velocity, v.srf_velocity) > 0) //distance is less than 800m
			{
				debugString += ("\nEnemy on tail. Braking");
				AdjustThrottle(minSpeed, true);
			}
			if(missile!=null 
				&& targetDot > 0
				&& distanceToTarget < 300
			   && vessel.srfSpeed > 130)
			{
				extending = true;
				lastTargetPosition = v.transform.position;
			}


			FlyToPosition(s, target);
		}



		void RegainEnergy(FlightCtrlState s)
		{
			debugString += "\nRegaining energy";
			steerMode = SteerModes.Aiming;
			Vector3 planarDirection = Vector3.ProjectOnPlane(vessel.srf_velocity, upDirection);
			float angle = (Mathf.Clamp(MissileGuidance.GetRadarAltitude(vessel) - minAltitude, 0, 1500) / 1500) * 90;
			angle = Mathf.Clamp(angle, 0, 55) * Mathf.Deg2Rad;
			Vector3 targetDirection = Vector3.RotateTowards(planarDirection, -upDirection, angle, 0).normalized;
		
			AdjustThrottle(maxSpeed, false);
			FlyToPosition(s, vesselTransform.position + (targetDirection*100));
		}


					

		void FlyToPosition(FlightCtrlState s, Vector3 targetPosition)
		{
			if(!startedLanded)
			{
				targetPosition = FlightPosition(targetPosition, minAltitude);
				targetPosition = vesselTransform.position + ((targetPosition - vesselTransform.position).normalized * 100);
			}

			Vector3d srfVel = vessel.srf_velocity;
			if(srfVel != Vector3d.zero)
			{
				velocityTransform.rotation = Quaternion.LookRotation(srfVel, -vesselTransform.forward);
			}
			velocityTransform.rotation = Quaternion.AngleAxis(90, velocityTransform.right) * velocityTransform.rotation;
			Vector3 localAngVel = vessel.angularVelocity;

			if(BDArmorySettings.DRAW_DEBUG_LINES)
			{
				flyingToPosition = targetPosition;
			}

			//test poststall
			float AoA = Vector3.Angle(vessel.ReferenceTransform.up, vessel.srf_velocity);
			if(AoA > 30f)
			{
				steerMode = SteerModes.Aiming;
			}

			//slow down for tighter turns
			float velAngleToTarget = Vector3.Angle(targetPosition-vesselTransform.position, vessel.srf_velocity);
			float normVelAngleToTarget = Mathf.Clamp(velAngleToTarget, 0, 90)/90;
			float speedReductionFactor = 1.25f;
			float finalSpeed = Mathf.Min(speedController.targetSpeed, Mathf.Clamp(maxSpeed - (speedReductionFactor * normVelAngleToTarget), idleSpeed, maxSpeed));
			debugString += "\nFinal Target Speed: " + finalSpeed.ToString("0.0");
			AdjustThrottle(finalSpeed, useBrakes, useAB);

			Vector3 targetDirection;
			Vector3 targetDirectionYaw;
			float yawError;
			float pitchError;
			float postYawFactor;
			float postPitchFactor;
			if(steerMode == SteerModes.NormalFlight)
			{
				targetDirection = velocityTransform.InverseTransformDirection(targetPosition - velocityTransform.position).normalized;
				targetDirection = Vector3.RotateTowards(Vector3.up, targetDirection, 45 * Mathf.Deg2Rad, 0);

				targetDirectionYaw = vesselTransform.InverseTransformDirection(vessel.srf_velocity).normalized;
				targetDirectionYaw = Vector3.RotateTowards(Vector3.up, targetDirectionYaw, 45 * Mathf.Deg2Rad, 0);


				postYawFactor = 0.5f;
				postPitchFactor = 1;


			}
			else//(steerMode == SteerModes.Aiming)
			{
				targetDirection = vesselTransform.InverseTransformDirection(targetPosition-vesselTransform.position).normalized;
				targetDirection = Vector3.RotateTowards(Vector3.up, targetDirection, 25 * Mathf.Deg2Rad, 0);
				targetDirectionYaw = targetDirection;

				if(command == PilotCommands.Follow)
				{
					postYawFactor = 0.45f;
					postPitchFactor = 1f;
				}
				else
				{
					postYawFactor = 1.75f;
					postPitchFactor = 2f;
				}
			}

			pitchError = VectorUtils.SignedAngle(Vector3.up, Vector3.ProjectOnPlane(targetDirection, Vector3.right), Vector3.back);
			yawError = VectorUtils.SignedAngle(Vector3.up, Vector3.ProjectOnPlane(targetDirectionYaw, Vector3.forward), Vector3.right);



			float finalMaxSteer = threatLevel * maxSteer;

			float steerPitch = (postPitchFactor * 0.015f * steerMult * pitchError) - (postPitchFactor * steerDamping * -localAngVel.x);
			float steerYaw = (postYawFactor * 0.020f * steerMult * yawError) - (postYawFactor * steerDamping * 0.6f * -localAngVel.z);
	

			s.yaw = Mathf.Clamp(steerYaw, -finalMaxSteer, finalMaxSteer);
			s.pitch = Mathf.Clamp(steerPitch, Mathf.Min(-finalMaxSteer, -0.2f), finalMaxSteer);


			//roll
			Vector3 currentRoll = -vesselTransform.forward;
			Vector3 rollTarget;

			//if(steerMode == SteerModes.Aiming || angleToTarget > 2)
			//{
				rollTarget = (targetPosition + ((steerMode == SteerModes.Aiming ? 10f : 25f) * upDirection)) - vesselTransform.position;
			//}
			//else
			//{
			//	rollTarget = upDirection;
			//}

			if(command == PilotCommands.Follow && useRollHint)
			{
				rollTarget = -commandLeader.vessel.ReferenceTransform.forward;
			}

			rollTarget = Vector3.ProjectOnPlane(rollTarget, vesselTransform.up);





			
			float rollError = Misc.SignedAngle(currentRoll, rollTarget, vesselTransform.right);
			debugString += "\nRoll offset: "+rollError;
			float steerRoll = (steerMult * 0.0015f * rollError);
			debugString += "\nSteerRoll: "+steerRoll;
			float rollDamping = (.10f * steerDamping * -localAngVel.y);
			steerRoll -= rollDamping;
			debugString += "\nRollDamping: "+rollDamping;



			float roll = Mathf.Clamp(steerRoll, -maxSteer, maxSteer);
			s.roll = roll;
			//
		}

		void FlyExtend(FlightCtrlState s, Vector3 tPosition)
		{
			if(vessel.srfSpeed < minSpeed)
			{
				RegainEnergy(s);
				return;
			}

			if(weaponManager)
			{
				float extendDistance = Mathf.Clamp(weaponManager.guardRange-1800, 2500, 4000);

				if(weaponManager.currentMissile && weaponManager.currentMissile.GetWeaponClass() == WeaponClasses.Bomb)
				{
					extendDistance = 4500;
				}

				if(targetVessel!=null && !targetVessel.LandedOrSplashed)
				{
					extendDistance = 800;
				}

				Vector3 srfVector = Vector3.ProjectOnPlane(vessel.transform.position - tPosition, upDirection);
				float srfDist = srfVector.magnitude;
				if(srfDist < extendDistance)
				{
					Vector3 targetDirection = srfVector.normalized*extendDistance;
					Vector3 target = vessel.transform.position + targetDirection;
					target = GetTerrainSurfacePosition(target) + (vessel.upAxis*Mathf.Min(defaultAltitude, MissileGuidance.GetRaycastRadarAltitude(vesselTransform.position)));
					FlyToPosition(s, FlightPosition(target, defaultAltitude));
				}
				else
				{
					extending = false;
				}
			}
			else
			{
				extending = false;
			}
		}

		void FlyCircular(FlightCtrlState s)
		{
			debugString += "\nFlying circular";

			if(vessel.srfSpeed < minSpeed)
			{
				RegainEnergy(s);
			}

			bool enemiesNearby = false;
			if(weaponManager)
			{
				BDArmorySettings.BDATeams team = weaponManager.team ? BDArmorySettings.BDATeams.B : BDArmorySettings.BDATeams.A;
				if(BDATargetManager.TargetDatabase[team].Count > 0)
				{
					threatLevel = 1;
					enemiesNearby = true;
				}
			}

			if(!enemiesNearby)
			{
				threatLevel = Mathf.MoveTowards(threatLevel, 0.5f, 0.05f*Time.deltaTime);
			}
			Vector3 axis = Vector3.Project(-vesselTransform.right, upDirection).normalized;
			Vector3 target = DefaultAltPosition() + Quaternion.AngleAxis(15, axis) * Vector3.ProjectOnPlane(vesselTransform.up * 1000, upDirection);
			Vector3 dirToAxis = target - vesselTransform.position;
			dirToAxis = Vector3.RotateTowards(Vector3.ProjectOnPlane(dirToAxis, upDirection), dirToAxis, 15 * Mathf.Deg2Rad, 0).normalized;
			target = vesselTransform.position + (dirToAxis * 1000);
			FlyToPosition(s, target);
		}

		void FlyOrbit(FlightCtrlState s, Vector3d centerGPS, float radius, float speed, bool clockwise)
		{
			if(vessel.srfSpeed < minSpeed)
			{
				RegainEnergy(s);
				return;
			}

			debugString += "\nFlying orbit";
			Vector3 flightCenter = GetTerrainSurfacePosition(VectorUtils.GetWorldSurfacePostion(centerGPS, vessel.mainBody)) + (defaultAltitude*upDirection);

			Vector3 myVectorFromCenter = Vector3.ProjectOnPlane(vessel.transform.position - flightCenter, upDirection);
			Vector3 myVectorOnOrbit = myVectorFromCenter.normalized * radius;

			Vector3 targetVectorFromCenter = Quaternion.AngleAxis(clockwise ? 15 : -15, upDirection) * myVectorOnOrbit;

			Vector3 verticalVelVector = Vector3.Project(vessel.srf_velocity, upDirection); //for vv damping

			Vector3 targetPosition = flightCenter + targetVectorFromCenter - (verticalVelVector * 0.25f);

			Vector3 vectorToTarget = targetPosition - vesselTransform.position;
			Vector3 planarVel = Vector3.ProjectOnPlane(vessel.srf_velocity, upDirection);
			vectorToTarget = Vector3.RotateTowards(planarVel, vectorToTarget, 25 * Mathf.Deg2Rad, 0);

			if(command != PilotCommands.Free && Vector3.Distance(vessel.transform.position, flightCenter) < radius*1.5f)
			{
				Debug.Log("AI Pilot reached command destination.");
				command = PilotCommands.Free;
			}

			AdjustThrottle(speed, false);
			FlyToPosition(s, targetPosition);
		}

		//sends target speed to speedController
		void AdjustThrottle(float targetSpeed, bool useBrakes, bool allowAfterburner = true)
		{
			speedController.targetSpeed = targetSpeed;
			speedController.useBrakes = useBrakes;
			speedController.allowAfterburner = allowAfterburner;
		}

		void Evasive(FlightCtrlState s)
		{
			currentStatus = "Evading";
			debugString += "\nEvasive";
			debugString += "\n Threat Distance: " + weaponManager.incomingMissileDistance;
			if(weaponManager && (weaponManager.isChaffing || weaponManager.isFlaring) && weaponManager.incomingMissileDistance > 2000)
			{
				RegainEnergy(s);
				return;
			}
			threatLevel = 1f;
			Vector3 target = (vessel.srfSpeed < 200) ? FlightPosition(vessel.transform.position, minAltitude) : vesselTransform.position;
			float angleOff = Mathf.Sin(Time.time * 0.75f) * 180;
			angleOff = Mathf.Clamp(angleOff, -45, 45);
			target +=
				(Quaternion.AngleAxis(angleOff, upDirection) * Vector3.ProjectOnPlane(vesselTransform.up * 500, upDirection));
				//+ (Mathf.Sin (Time.time/3) * upDirection * minAltitude/3);

			if(weaponManager.isFlaring)
			{
				useAB = vessel.srfSpeed < minSpeed;
				useBrakes = false;
				AdjustThrottle(minSpeed, false, useAB);
			}

			FlyToPosition(s, target);
		}

		void TakeOff(FlightCtrlState s)
		{
			threatLevel = 1;
			debugString += "\nTaking off/Gaining altitude";

			if(vessel.LandedOrSplashed && vessel.srfSpeed < takeOffSpeed)
			{
				defaultOrbitCoords = VectorUtils.WorldPositionToGeoCoords(vessel.transform.position, vessel.mainBody);
				return;
			}

			steerMode = SteerModes.Aiming;

			float radarAlt = MissileGuidance.GetRadarAltitude(vessel);

			Vector3 forwardPoint = vessel.transform.position + Vector3.ProjectOnPlane(vesselTransform.up * 100, upDirection);
			float terrainDiff = MissileGuidance.GetRaycastRadarAltitude(forwardPoint) - radarAlt;
			terrainDiff = Mathf.Max(terrainDiff, 0);

			float rise = Mathf.Clamp((float)vessel.srfSpeed * 0.3f, 5, 100);

			if(radarAlt > 70)
			{
				vessel.ActionGroups.SetGroup(KSPActionGroup.Gear, false);
			}
			else
			{
				vessel.ActionGroups.SetGroup(KSPActionGroup.Gear, true);
			}

			FlyToPosition(s, forwardPoint + (upDirection * (rise+terrainDiff)));

			if(radarAlt > minAltitude)
			{
				startedLanded = false;
			}
		}

		Vector3 DefaultAltPosition()
		{
			return (vessel.transform.position + (-(float)vessel.altitude*upDirection) + (defaultAltitude *upDirection));
		}

		Vector3 GetSurfacePosition(Vector3 position)
		{
			return position - ((float)FlightGlobals.getAltitudeAtPos(position) * upDirection);
		}

		Vector3 GetTerrainSurfacePosition(Vector3 position)
		{
			return position - (MissileGuidance.GetRaycastRadarAltitude(position) * upDirection);
		}


		Vector3 FlightPosition(Vector3 targetPosition, float minAlt)
		{
			Vector3 forwardDirection = vesselTransform.up;
			Vector3 targetDirection = (targetPosition - vesselTransform.position).normalized;

			if(Vector3.Dot(targetDirection, forwardDirection) < 0)
			{
				Vector3 projectedDirection = Vector3.ProjectOnPlane(forwardDirection, upDirection);
				Vector3 projectedTargetDirection = Vector3.ProjectOnPlane(targetDirection, upDirection);
				if(Vector3.Angle(projectedTargetDirection, projectedDirection) > 160f)
				{
					targetPosition = vessel.transform.position + (Quaternion.AngleAxis(45, upDirection)*(projectedDirection.normalized*200));
					targetDirection = (targetPosition - vesselTransform.position).normalized;
				}

				targetPosition = vesselTransform.position + Vector3.RotateTowards(projectedDirection, Vector3.ProjectOnPlane(targetDirection, upDirection), 45*Mathf.Deg2Rad, 0).normalized*200;
			}


			if(MissileGuidance.GetRadarAltitude(vessel) > minAlt * 1.1f)
			{
				return targetPosition;
			}

			float pointRadarAlt = MissileGuidance.GetRaycastRadarAltitude(targetPosition);
			if(pointRadarAlt < minAlt)
			{
				float adjustment = (minAlt-pointRadarAlt);
				debugString += "\nTarget position is below minAlt. Adjusting by "+adjustment;
				return targetPosition + (adjustment * upDirection);
			}
			else
			{
				return targetPosition;
			}
		}

		public bool GetLaunchAuthorization(Vessel targetV, MissileFire mf)
		{
			bool launchAuthorized = false;
			Vector3 target = targetV.transform.position;
			MissileLauncher missile = mf.currentMissile;
			if(missile != null)
			{
				if(!targetV.LandedOrSplashed)
				{
					target = MissileGuidance.GetAirToAirFireSolution(missile, targetV);
				}

				float boresightFactor = targetV.LandedOrSplashed ? 0.75f : 0.35f;
				float maxOffBoresight = missile.maxOffBoresight;
				if(missile.targetingMode == MissileLauncher.TargetingModes.GPS) maxOffBoresight = 45;

				float fTime = 2f;
				Vector3 futurePos = target + (targetV.srf_velocity * fTime);
				Vector3 myFuturePos = vesselTransform.position + (vessel.srf_velocity * fTime);
				bool fDot = Vector3.Dot(vesselTransform.up, futurePos - myFuturePos) > 0; //check target won't likely be behind me soon

				if(fDot && Vector3.Angle(missile.transform.forward, target - missile.transform.position) < maxOffBoresight * boresightFactor)
				{
					launchAuthorized = true;
				}
			}

			return launchAuthorized;
		}

		void GetGuardTarget()
		{
			if(weaponManager!=null && weaponManager.vessel == vessel)
			{
				if(weaponManager.guardMode && weaponManager.currentTarget!=null)
				{
					targetVessel = weaponManager.currentTarget.Vessel;
				}
				else
				{
					targetVessel = null;
				}
				weaponManager.pilotAI = this;
				return;
			}
			else
			{
				foreach(var mf in vessel.FindPartModulesImplementing<MissileFire>())
				{
					if(mf.currentTarget!=null)
					{
						targetVessel = mf.currentTarget.Vessel;
					}
					else
					{
						targetVessel = null;
					}

					weaponManager = mf;
					mf.pilotAI = this;

					return;
				}
			}
		}

		bool DetectCollision(Vector3 direction, out Vector3 badDirection)
		{
			badDirection = Vector3.zero;
			if(MissileGuidance.GetRadarAltitude(vessel) < 20) return false;

			direction = direction.normalized;
			int layerMask = 557057;
			Ray ray = new Ray(vesselTransform.position + (50*vesselTransform.up), direction);
			float distance = Mathf.Clamp((float)vessel.srfSpeed * 4f, 125f, 2500);
			RaycastHit hit;
			if(Physics.SphereCast(ray, 10, out hit, distance, layerMask))
			{
				Rigidbody otherRb = hit.collider.attachedRigidbody;
				if(otherRb)
				{
					if(Vector3.Dot(otherRb.velocity, vessel.srf_velocity) < 0)
					{
						badDirection = hit.point - ray.origin;
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					badDirection = hit.point - ray.origin;
					return true;
				}
			}
			else
			{
				return false;
			}
		}

		void UpdateCommand(FlightCtrlState s)
		{
			if(command == PilotCommands.Follow && !commandLeader)
			{
				ReleaseCommand();
				return;
			}

			if(command == PilotCommands.Follow)
			{
				currentStatus = "Follow";
				UpdateFollowCommand(s);
			}
			else if(command == PilotCommands.FlyTo)
			{
				currentStatus = "Fly To";
				FlyOrbit(s, defaultOrbitCoords, 2500, idleSpeed, true);
			}
			else if(command == PilotCommands.Attack)
			{
				currentStatus = "Attack";
				FlyOrbit(s, defaultOrbitCoords, 4500, maxSpeed, true);
			}
		}

		void UpdateFollowCommand(FlightCtrlState s)
		{
			threatLevel = 1;
			steerMode = SteerModes.NormalFlight;
			//s.mainThrottle = 1;
			vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, false);

			commandSpeed = commandLeader.vessel.srfSpeed;
			commandHeading = commandLeader.vessel.srf_velocity.normalized;

			//formation position
			commandPosition = GetFormationPosition();

			float distanceToPos = Vector3.Distance(vesselTransform.position, commandPosition);

			//if(distanceToPos > 100)
			//{

			float dotToPos = Vector3.Dot(vesselTransform.up, commandPosition - vesselTransform.position);
			Vector3 flyPos;
			useRollHint = false;

			float ctrlModeThresh = 1000;

			if(distanceToPos < ctrlModeThresh)
			{
				flyPos = commandPosition + (ctrlModeThresh * commandHeading);

				Vector3 vectorToFlyPos = flyPos - vessel.ReferenceTransform.position;
				Vector3 projectedPosOffset = Vector3.ProjectOnPlane(commandPosition - vessel.ReferenceTransform.position, commandHeading);
				float posOffsetMag = projectedPosOffset.magnitude;
				float adjustAngle = (Mathf.Clamp(posOffsetMag * 0.27f, 0, 25));
				Vector3 projVel = Vector3.Project(vessel.srf_velocity - commandLeader.vessel.srf_velocity, projectedPosOffset);
				adjustAngle -= Mathf.Clamp(Mathf.Sign(Vector3.Dot(projVel, projectedPosOffset)) * projVel.magnitude * 0.12f, -10, 10);

				adjustAngle *= Mathf.Deg2Rad;

				vectorToFlyPos = Vector3.RotateTowards(vectorToFlyPos, projectedPosOffset, adjustAngle, 0);

				flyPos = vessel.ReferenceTransform.position + vectorToFlyPos;

				if(distanceToPos < 400)
				{
					steerMode = SteerModes.Aiming;
				}
				else
				{
					steerMode = SteerModes.NormalFlight;
				}
				/*
				if(dotToPos < 0)
				{
					flyPos = commandPosition + (315 * commandHeading);
					s.mainThrottle = 0;
					vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);

					steerMode = SteerModes.NormalFlight;
				}
				*/
				if(distanceToPos < 10)
				{
					useRollHint = true;
				}
			}
			else
			{
				steerMode = SteerModes.NormalFlight;
				flyPos = commandPosition;
			}

			double finalMaxSpeed = commandSpeed;
			if(dotToPos > 0)
			{
				finalMaxSpeed += (distanceToPos / 8);
			}
			else
			{
				finalMaxSpeed -= (distanceToPos / 2);
			}


			AdjustThrottle((float)finalMaxSpeed, true);


			FlyToPosition(s, flyPos);
		}

		Vector3d GetFormationPosition()
		{
			Quaternion origVRot = velocityTransform.rotation;
			Vector3 origVLPos = velocityTransform.localPosition;

			velocityTransform.position = commandLeader.vessel.ReferenceTransform.position;
			if(commandLeader.vessel.srf_velocity != Vector3d.zero)
			{
				velocityTransform.rotation = Quaternion.LookRotation(commandLeader.vessel.srf_velocity, upDirection);
				velocityTransform.rotation = Quaternion.AngleAxis(90, velocityTransform.right) * velocityTransform.rotation;
			}
			else
			{
				velocityTransform.rotation = commandLeader.vessel.ReferenceTransform.rotation;
			}

			/*
			Vector3 lateralVelVector = Vector3.Project(vessel.srf_velocity, velocityTransform.right)/2;
			Vector3.ClampMagnitude(lateralVelVector, 25);

			Vector3 verticalVelVector = Vector3.Project(vessel.srf_velocity - commandLeader.vessel.srf_velocity, velocityTransform.forward) * 1;//0.75f; //MOVE THIS TO UpdateFollowCommand TO REGULATE VERTICAL POSITION AND SPEED
			Vector3.ClampMagnitude(verticalVelVector, 25);
			*/

			Vector3d pos = velocityTransform.TransformPoint(GetLocalFormationPosition(commandFollowIndex));// - lateralVelVector - verticalVelVector;

			velocityTransform.localPosition = origVLPos;
			velocityTransform.rotation = origVRot;

			return pos;
		}

		Vector3d GetLocalFormationPosition(int index)
		{
			float indexF = (float)index;
			indexF++;

			double rightSign = indexF % 2 == 0 ? -1 : 1;
			double positionFactor = Math.Ceiling(indexF/ 2);
			double spread = commandLeader.spread;
			double lag = commandLeader.lag;

			double right = rightSign * positionFactor * spread;
			double back = positionFactor * lag * -1;

			return new Vector3d(right, back, 0);
		}


		public void ReleaseCommand()
		{
			if(vessel && command != PilotCommands.Free)
			{
				Debug.Log(vessel.vesselName + " was released from command.");
				command = PilotCommands.Free;

				defaultOrbitCoords = VectorUtils.WorldPositionToGeoCoords(vesselTransform.position, vessel.mainBody);
			}
		}

		public void CommandFollow(ModuleWingCommander leader, int followerIndex)
		{
			if(!pilotEnabled)
			{
				return;
			}

			if(leader == vessel || followerIndex < 0)
			{
				return;
			}

			Debug.Log(vessel.vesselName + " was commanded to follow.");
			command = PilotCommands.Follow;
			commandLeader = leader;
			commandFollowIndex = followerIndex;
		}

		public void CommandAG(KSPActionGroup ag)
		{
			if(!pilotEnabled)
			{
				return;
			}


			vessel.ActionGroups.ToggleGroup(ag);
		}

		public void CommandFlyTo(Vector3 gpsCoords)
		{
			if(!pilotEnabled)
			{
				return;
			}


			Debug.Log(vessel.vesselName + " was commanded to fly to.");
			defaultOrbitCoords = gpsCoords;
			commandGeoPos = gpsCoords;
			command = PilotCommands.FlyTo;
		}

		public void CommandAttack(Vector3 gpsCoords)
		{
			if(!pilotEnabled)
			{
				return;
			}


			Debug.Log(vessel.vesselName + " was commanded to attack.");
			defaultOrbitCoords = gpsCoords;
			commandGeoPos = gpsCoords;
			command = PilotCommands.Attack;
		}

		void OnGUI()
		{
			if(pilotEnabled && vessel.isActiveVessel)	
			{
				if(BDArmorySettings.DRAW_DEBUG_LABELS)
				{
					GUI.Label(new Rect(200, 800, 400, 400), debugString);	
				}

				if(BDArmorySettings.DRAW_DEBUG_LINES)
				{
					if(command == PilotCommands.Follow)
					{
						BDGUIUtils.DrawLineBetweenWorldPositions(vesselTransform.position, commandPosition, 2, Color.red);
					}


				}


			}
		}

	}
}

